// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.

'use strict';

var cacheName = 'PWA_Data_center_cache';
var systemDependantFiles = [
  // routes
  '/',
  '/api',

  // html
  //'/index.html',
  //'/api.html',

  // manifest
  '/manifest.json',

  // RequireJS config files
  '/config.js',
  '/config_api.js',

  // JavaScript Files
  '/scripts/main.js',
  '/scripts/sw/runtime-caching.js',
  '/scripts/lib/jquery-3.1.1.js',
  '/scripts/lib/r.js',
  '/scripts/lib/pouchdb-6.1.2.js',
  '/scripts/custom/contentutil.js',
  '/scripts/custom/datastorage.js',
  '/scripts/custom/crossdatastoragehub.js',
  '/scripts/custom/auth0connection.js',

  // images
  '/icon.png',
  '/images/hamburger.svg',
  '/images/touch/apple-touch-icon.png',
  '/images/touch/chrome-touch-icon-192x192.png',
  '/images/touch/icon-128x128.png',
  '/images/touch/ms-touch-icon-144x144-precomposed.png',
  '/images/icons/06_menu_grid-512.png',
  '/images/icons/settings-5-xxl.png',
  '/images/icons/About-icon.png',

  // Stylesheets
  '/styles/main.css',

  // Humans
  '/humans.txt'
];

var externalFiles = [
  // css
  'https://fonts.googleapis.com/icon?family=Material+Icons',
  'https://code.getmdl.io/1.2.1/material.indigo-pink.min.css',

  // js
  'https://code.getmdl.io/1.2.1/material.min.js',
  '//cdn.auth0.com/js/lock/10.3.0/lock.min.js',
  'https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js',

  // icons
  'https://localhost:5000/icon.png'
];

var filesToCache = systemDependantFiles.concat(externalFiles);

self.addEventListener('install', function(e) {
  console.log('[ServiceWorker] Install');
  e.waitUntil(
    caches.open(cacheName).then(function(cache) {
      console.log('[ServiceWorker] Caching app shell');
      var promises = [];
      for ( let i = 0; i < externalFiles.length; i++ ) {
        let request = new Request(externalFiles[i], {mode : 'no-cors', header : new Headers({'Access-Control-Allow-Origin' : '*'})});
        promises.push(fetch(request)
          .catch(function (err) {
            console.log(err, i);
            return fetch(new Request(externalFiles[i], { mode : 'cors', header : new Headers({'Access-Control-Allow-Origin' : '*'})}))
          })
          .then(function (response) {
            cache.put(request, response);
          }));
      }
      promises.push(cache.addAll(systemDependantFiles));
      return Promise.all(promises);
    })
  );
});

self.addEventListener('activate', function(e) {
  console.log('[ServiceWorker] Activate');
  e.waitUntil(
    caches.keys().then(function(keyList) {
      return Promise.all(keyList.map(function(key) {
        if (key !== cacheName) {
          console.log('[ServiceWorker] Removing old cache', key);
          return caches.delete(key);
        }
      }));
    })
  );
  return self.clients.claim();
});

self.addEventListener('fetch', function(e) {
  console.log('[ServiceWorker] Fetch', e.request.url);
  e.respondWith(
    caches.match(e.request).then(function(response) {
      return response || fetch(e.request);
    })
  );
});
